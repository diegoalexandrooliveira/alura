{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;IAAMA,W;;;;;;;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kCAEcC,G,EAAK;AACjB,UAAI,CAACA,IAAIC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACb,aAAOH,GAAP;AACD;;;wBAEGI,G,EAAK;AAAA;;AACP,aAAOC,MAAMD,GAAN,EACJE,IADI,CACC;AAAA,eAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OADD,EAEJM,IAFI,CAEC;AAAA,eAAON,IAAIQ,IAAJ,EAAP;AAAA,OAFD,CAAP;AAGD;;;yBAEIJ,G,EAAKK,I,EAAM;AAAA;;AACd,aAAOJ,MAAMD,GAAN,EAAW;AAChBM,iBAAS;AACP,0BAAgB;AADT,SADO;AAIhBC,gBAAQ,MAJQ;AAKhBC,cAAMC,KAAKC,SAAL,CAAeL,IAAf;AALU,OAAX,EAONH,IAPM,CAOD;AAAA,eAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,OAPC,CAAP;AAQD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HttpService.js","sourcesContent":["class HttpService {\r\n\r\n\r\n  // get(url) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     let xhr = new XMLHttpRequest();\r\n  //     xhr.open(\"GET\", url);\r\n  //\r\n  //     xhr.onreadystatechange = () => {\r\n  //       /*\r\n  //       Estados de uma requisição\r\n  //       0: requisição ainda não iniciada\r\n  //       1: conexão com o servidor estabelecida\r\n  //       2: requisição recebida\r\n  //       3: processando requisição\r\n  //       4: requisição concluída e a resposta está pronta\r\n  //       */\r\n  //       if (xhr.readyState == 4) {\r\n  //         if (xhr.status == 200) {\r\n  //           resolve(JSON.parse(xhr.responseText));\r\n  //         } else {\r\n  //           reject(xhr.responseText);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //\r\n  //     xhr.send();\r\n  //   });\r\n  // }\r\n\r\n  _handleErrors(res) {\r\n    if (!res.ok) throw new Error(res.statusText);\r\n    return res;\r\n  }\r\n\r\n  get(url) {\r\n    return fetch(url)\r\n      .then(res => this._handleErrors(res))\r\n      .then(res => res.json());\r\n  }\r\n\r\n  post(url, dado) {\r\n    return fetch(url, {\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      method: 'post',\r\n      body: JSON.stringify(dado)\r\n    })\r\n    .then(res => this._handleErrors(res));\r\n  }\r\n\r\n  // post(url, dado) {\r\n  //\r\n  //\r\n  //   return new Promise((resolve, reject) => {\r\n  //\r\n  //     let xhr = new XMLHttpRequest();\r\n  //     xhr.open(\"POST\", url, true);\r\n  //     xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n  //\r\n  //     xhr.onreadystatechange = () => {\r\n  //       /*\r\n  //       Estados de uma requisição\r\n  //       0: requisição ainda não iniciada\r\n  //       1: conexão com o servidor estabelecida\r\n  //       2: requisição recebida\r\n  //       3: processando requisição\r\n  //       4: requisição concluída e a resposta está pronta\r\n  //       */\r\n  //       if (xhr.readyState == 4) {\r\n  //         if (xhr.status == 200) {\r\n  //           resolve(JSON.parse(xhr.responseText));\r\n  //         } else {\r\n  //           reject(xhr.responseText);\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //\r\n  //     xhr.send(JSON.stringify(dado));\r\n  //\r\n  //   });\r\n  //\r\n  // }\r\n\r\n}\r\n"]}