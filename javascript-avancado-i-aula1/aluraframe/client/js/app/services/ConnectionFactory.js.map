{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AAEbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B;AAAA,uBAAKT,kBAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,eAA9B;;AAEAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACA;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eAVD;;AAYAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAMD,aAvBM,CAAP;AAwBD;;;wCAEoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEF1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC;AAClCG,+BAAe;AADmB,eAApC;AAGD,aAPD;AAQD;;;4CAEwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["  const stores = ['negociacoes'];\n  const version = 4;\n  const dbName = 'aluraframe';\n\n  var connection = null;\n\n  var close = null;\n\n  export class ConnectionFactory {\n\n    constructor() {\n      throw new Error('Classe estática');\n    }\n\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version);\n\n        openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\n\n        openRequest.onsuccess = e => {\n          if (!connection) {\n            connection = e.target.result;\n            close = connection.close.bind(connection);\n            // use o bind ou na chamada do close da pra fazer Reflect.apply\n            connection.close = function() {\n              throw new Error('Você não pode fechar a conexão diretamente.');\n            }\n          }\n          resolve(connection);\n        };\n\n        openRequest.onerror = e => {\n          console.log(e.target.error);\n          reject(e.target.error.name);\n        };\n\n\n      });\n    }\n\n    static _createStores(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store))\n          connection.deleteObjectStore(store);\n\n        connection.createObjectStore(store, {\n          autoIncrement: true\n        });\n      });\n    }\n\n    static closeConnection() {\n      if (connection) {\n        close();\n        connection = null;\n      }\n    }\n  }\n\n\n  // var ConnectionFactory = (function() {\n  //   const stores = ['negociacoes'];\n  //   const version = 4;\n  //   const dbName = 'aluraframe';\n  //\n  //   var connection = null;\n  //\n  //   var close = null;\n  //\n  //   return class ConnectionFactory {\n  //\n  //     constructor() {\n  //       throw new Error('Classe estática');\n  //     }\n  //\n  //     static getConnection() {\n  //       return new Promise((resolve, reject) => {\n  //         let openRequest = window.indexedDB.open(dbName, version);\n  //\n  //         openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\n  //\n  //         openRequest.onsuccess = e => {\n  //           if (!connection) {\n  //             connection = e.target.result;\n  //             close = connection.close.bind(connection);\n  //             // use o bind ou na chamada do close da pra fazer Reflect.apply\n  //             connection.close = function() {\n  //               throw new Error('Você não pode fechar a conexão diretamente.');\n  //             }\n  //           }\n  //           resolve(connection);\n  //         };\n  //\n  //         openRequest.onerror = e => {\n  //           console.log(e.target.error);\n  //           reject(e.target.error.name);\n  //         };\n  //\n  //\n  //       });\n  //     }\n  //\n  //     static _createStores(connection) {\n  //       stores.forEach(store => {\n  //         if (connection.objectStoreNames.contains(store))\n  //           connection.deleteObjectStore(store);\n  //\n  //         connection.createObjectStore(store, {\n  //           autoIncrement: true\n  //         });\n  //       });\n  //     }\n  //\n  //     static closeConnection() {\n  //       if (connection) {\n  //         close();\n  //         connection = null;\n  //       }\n  //     }\n  //   }\n  // })();\n"]}