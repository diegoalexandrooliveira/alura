{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAClC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;;AAEA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B;AAAA,mBAAKd,kBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,WAA9B;;AAEAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACA;AACAA,yBAAWC,KAAX,GAAmB,YAAW;AAC5B,sBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AACD,WAVD;;AAYAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAMD,SAvBM,CAAP;AAwBD;AA/BH;AAAA;AAAA,oCAiCuBrB,UAjCvB,EAiCmC;AAC/BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACEzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEFzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC;AAClCG,2BAAe;AADmB,WAApC;AAGD,SAPD;AAQD;AA1CH;AAAA;AAAA,wCA4C2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACAD,uBAAa,IAAb;AACD;AACF;AAjDH;;AAAA;AAAA;AAmDD,CA5DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\r\n  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n\r\n  var connection = null;\r\n\r\n  var close = null;\r\n\r\n  return class ConnectionFactory {\r\n\r\n    constructor() {\r\n      throw new Error('Classe estática');\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n        openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) {\r\n            connection = e.target.result;\r\n            close = connection.close.bind(connection);\r\n            // use o bind ou na chamada do close da pra fazer Reflect.apply\r\n            connection.close = function() {\r\n              throw new Error('Você não pode fechar a conexão diretamente.');\r\n            }\r\n          }\r\n          resolve(connection);\r\n        };\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error);\r\n          reject(e.target.error.name);\r\n        };\r\n\r\n\r\n      });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store))\r\n          connection.deleteObjectStore(store);\r\n\r\n        connection.createObjectStore(store, {\r\n          autoIncrement: true\r\n        });\r\n      });\r\n    }\r\n\r\n    static closeConnection() {\r\n      if (connection) {\r\n        close();\r\n        connection = null;\r\n      }\r\n    }\r\n  }\r\n})();\r\n"]}