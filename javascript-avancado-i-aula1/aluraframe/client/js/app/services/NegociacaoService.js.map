{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaPassada","obterNegociacoesDaSemanaRetrasada","then","negociacoes","semanas","reduce","retorno","semana","concat","catch","Error","erro","resolve","reject","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoLista"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  obterNegociacoes() {\n    return Promise.all([this.obterNegociacoesDaSemana(), this.obterNegociacoesDaSemanaPassada(),\n        this.obterNegociacoesDaSemanaRetrasada()\n      ])\n      .then(semanas => {\n        let negociacoes = semanas.reduce((retorno, semana) =>\n          retorno.concat(semana), []);\n        return negociacoes;\n      })\n      .catch(erro => {\n        throw new Error(erro)\n      });\n  }\n\n\n  obterNegociacoesDaSemana() {\n\n    return new Promise((resolve, reject) => {\n\n      this._http.get(\"negociacoes/semana\")\n        .then(negociacoes =>\n          resolve(negociacoes.map(objeto =>\n            new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n        ).catch(erro => {\n          console.log(erro);\n          reject(\"Não foi possível importar as negociações da semana\");\n        })\n\n    });\n  }\n  obterNegociacoesDaSemanaPassada() {\n    return new Promise((resolve, reject) => {\n\n      this._http.get(\"negociacoes/anterior\").then(negociacoes =>\n        resolve(negociacoes.map(objeto =>\n          new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n      ).catch(erro => {\n        console.log(erro);\n        reject(\"Não foi possível importar as negociações da semana passada\");\n      })\n\n    });\n  }\n  obterNegociacoesDaSemanaRetrasada() {\n\n    return new Promise((resolve, reject) => {\n\n      this._http.get(\"negociacoes/retrasada\").then(negociacoes =>\n        resolve(negociacoes.map(objeto =>\n          new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\n      ).catch(erro => {\n        console.log(erro);\n        reject(\"Não foi possível importar as negociações da semana retrasada\");\n      })\n\n    });\n  }\n\n  cadastrar(negociacao) {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDAO(connection))\n      .then(dao => dao.adiciona(negociacao))\n      .then(() => 'Negociação adicionada com sucesso.')\n      .catch(() => {\n        console.log(erro);\n        throw new Error('Não foi possível adicionar a negociação.')\n      });\n  }\n\n  lista() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDAO(connection))\n      .then(dao => dao.listaTodos())\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociacões.')\n      });\n  }\n\n  apagaTodos() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDAO(connection))\n      .then(dao => dao.apagaTodos())\n      .then(() => 'Negociações apagadas com sucesso.')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível apagar as negociações.');\n      });\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes()\n      .then(negociacoes =>\n        negociacoes.filter(negociacao =>\n          !listaAtual.some(negociacaoLista =>\n            JSON.stringify(negociacaoLista) == JSON.stringify(negociacao))))\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível importar as negociações');\n      });\n  }\n\n}\n"]}